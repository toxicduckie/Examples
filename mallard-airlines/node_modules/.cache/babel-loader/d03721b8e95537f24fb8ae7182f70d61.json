{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Duckie\\\\Documents\\\\AlphaSights Project\\\\flights\\\\src\\\\Components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport AircraftsList from './AircraftsList';\nimport FlightsList from './FlightsList';\nimport RotationColumn from './RotationColumn';\nimport Calendar from './Calendar';\nimport { typeFlight, typeTurnaround, turnaroundTime, totalDayTime, timeSort, flightsSort, calcPercentage, turnaroundPercentage, usagePercentage, todaysDate } from './utils'; // Since I decided not to use redux, all the state is included in App\n// Using hooks to have a cleaner code\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // State\n  const [aircrafts, setAircrafts] = useState([]);\n  const [flights, setFlights] = useState([]);\n  const [flightsLoading, setFlightsLoading] = useState(false);\n  const [rotations, setRotations] = useState({});\n  const [selectedAircraft, setSelectedAircraft] = useState('');\n  const [usageList, setUsageList] = useState({});\n\n  const fetchData = async (value, callback, sorter) => {\n    const res = await fetch(value);\n    const body = await res.json();\n    const {\n      data\n    } = body;\n    const response = data || body;\n\n    if (sorter) {\n      response.sort(sorter);\n    }\n\n    callback(response);\n  };\n\n  useEffect(() => {\n    fetchData('https://infinite-dawn-93085.herokuapp.com/aircrafts', setAircrafts);\n  }, []); // Initialize the rotation object ()\n\n  const makeNewRotation = aircraft => {\n    const newRotations = { ...rotations,\n      [aircraft]: {\n        flights: [],\n        freeTime: [{\n          start: 0,\n          end: 86400,\n          percentage: 100,\n          type: 'Free'\n        }],\n        scheduledTime: []\n      }\n    };\n    setRotations(newRotations);\n  }; // Calculates the \"free time\" an aircraft has\n\n\n  const makeFreeTime = scheduledTime => {\n    const freeTimeObj = scheduledTime.reduce((acc, val) => {\n      if (val.start - acc.lastTime <= 0) {\n        return acc;\n      }\n\n      if (val.type === typeFlight) {\n        const obj = {\n          start: acc.lastTime,\n          end: val.start,\n          type: 'Free'\n        };\n        obj.percentage = calcPercentage(obj.end - obj.start, totalDayTime);\n        acc.freeTime.push(obj);\n      } else if (val.type === typeTurnaround) {\n        acc.lastTime = val.end;\n      }\n\n      return acc;\n    }, {\n      lastTime: 0,\n      freeTime: []\n    });\n    const {\n      lastTime,\n      freeTime\n    } = freeTimeObj;\n\n    if (lastTime <= totalDayTime) {\n      freeTime.push({\n        start: lastTime,\n        end: totalDayTime,\n        percentage: calcPercentage(totalDayTime - lastTime, totalDayTime),\n        type: 'Free'\n      });\n    }\n\n    return freeTime;\n  };\n\n  const makeAirCraftRotation = aircraftRotation => {\n    const {\n      scheduledTime\n    } = aircraftRotation;\n    const freeTime = makeFreeTime(scheduledTime);\n    const newAircraftRotation = { ...aircraftRotation,\n      freeTime\n    };\n    return { ...rotations,\n      [selectedAircraft]: newAircraftRotation\n    };\n  };\n\n  const onAircraftClick = async aircraft => {\n    // In a real case scenario this would accept a value to fetch data based on the aircraft\n    setFlightsLoading(true);\n    await fetchData('https://infinite-dawn-93085.herokuapp.com/flights', setFlights, flightsSort);\n    setSelectedAircraft(aircraft);\n\n    if (!rotations[aircraft]) {\n      makeNewRotation(aircraft);\n    }\n\n    setFlightsLoading(false);\n  };\n\n  const onFlightClick = target => {\n    const {\n      flights: aircraftFlights,\n      scheduledTime: aircraftScheduledTime\n    } = rotations[selectedAircraft];\n    const newRotationFlights = aircraftFlights ? [...aircraftFlights, target].sort(flightsSort) : [target];\n    const {\n      ident,\n      departuretime,\n      arrivaltime,\n      destination\n    } = target;\n    const formattedSchedule = {\n      id: ident,\n      type: typeFlight,\n      start: departuretime,\n      end: arrivaltime,\n      percentage: calcPercentage(arrivaltime - departuretime, totalDayTime)\n    };\n    const newScheduleBlock = [formattedSchedule];\n    const startTurnaroundTime = formattedSchedule.end;\n    const endTurnaroundTime = formattedSchedule.end + turnaroundTime;\n\n    if (endTurnaroundTime - startTurnaroundTime) {\n      const turnaroundObj = {\n        id: ident,\n        type: typeTurnaround,\n        start: startTurnaroundTime <= totalDayTime ? startTurnaroundTime : totalDayTime,\n        end: endTurnaroundTime <= totalDayTime ? endTurnaroundTime : totalDayTime,\n        origin: destination,\n        percentage: turnaroundPercentage\n      };\n      newScheduleBlock.push(turnaroundObj);\n    }\n\n    const newScheduledTime = [...aircraftScheduledTime, ...newScheduleBlock].sort(timeSort);\n    const currentPercentage = usagePercentage(newScheduledTime);\n    const newUsageList = { ...usageList,\n      [selectedAircraft]: currentPercentage\n    };\n    setUsageList(newUsageList);\n    const newAircraftRotation = { ...rotations[selectedAircraft],\n      flights: newRotationFlights,\n      scheduledTime: newScheduledTime\n    };\n    const newRotation = makeAirCraftRotation(newAircraftRotation);\n    setRotations(newRotation);\n  };\n\n  const onRotationClick = target => {\n    const {\n      flights: aircraftFlights,\n      scheduledTime: aircraftScheduledTime\n    } = rotations[selectedAircraft];\n    const aircraftFlightIndex = aircraftFlights.findIndex(el => el === target);\n    const newAircraftFlights = aircraftFlights.splice(0, aircraftFlightIndex);\n    const scheduledTimeIndex = aircraftScheduledTime.findIndex(el => el.id === target.ident);\n    const newScheduledTime = aircraftScheduledTime.splice(0, scheduledTimeIndex);\n    const currentPercentage = usagePercentage(newScheduledTime);\n    const newUsageList = { ...usageList,\n      [selectedAircraft]: currentPercentage\n    };\n    setUsageList(newUsageList);\n    const newAircraftRotation = { ...rotations[selectedAircraft],\n      flights: newAircraftFlights,\n      scheduledTime: newScheduledTime\n    };\n    const newRotation = makeAirCraftRotation(newAircraftRotation);\n    setRotations(newRotation);\n  };\n\n  const filterFlights = () => {\n    const curRot = rotations[selectedAircraft];\n\n    if (!curRot || !curRot.flights.length) {\n      return flights;\n    }\n\n    const canBeScheduled = flight => {\n      const lastIndex = curRot.scheduledTime.length - 1;\n      const {\n        origin,\n        end\n      } = curRot.scheduledTime[lastIndex];\n      return (!origin || origin === flight.origin) && flight.departuretime >= end;\n    };\n\n    return flights.filter(flight => {\n      return !curRot.flights.includes(flight) && canBeScheduled(flight);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      date: todaysDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AircraftsList, {\n      aircraftList: aircrafts,\n      onElementClick: onAircraftClick,\n      usageList: usageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RotationColumn, {\n      rotation: rotations[selectedAircraft] || [],\n      onElementClick: onRotationClick,\n      selectedAircraft: selectedAircraft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightsList, {\n      flightsLoading: flightsLoading,\n      flightList: filterFlights(),\n      onElementClick: onFlightClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"I2NjnwPMOn8ZSVR+J4BQRaaBu14=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Duckie/Documents/AlphaSights Project/flights/src/Components/App.js"],"names":["React","useState","useEffect","AircraftsList","FlightsList","RotationColumn","Calendar","typeFlight","typeTurnaround","turnaroundTime","totalDayTime","timeSort","flightsSort","calcPercentage","turnaroundPercentage","usagePercentage","todaysDate","App","aircrafts","setAircrafts","flights","setFlights","flightsLoading","setFlightsLoading","rotations","setRotations","selectedAircraft","setSelectedAircraft","usageList","setUsageList","fetchData","value","callback","sorter","res","fetch","body","json","data","response","sort","makeNewRotation","aircraft","newRotations","freeTime","start","end","percentage","type","scheduledTime","makeFreeTime","freeTimeObj","reduce","acc","val","lastTime","obj","push","makeAirCraftRotation","aircraftRotation","newAircraftRotation","onAircraftClick","onFlightClick","target","aircraftFlights","aircraftScheduledTime","newRotationFlights","ident","departuretime","arrivaltime","destination","formattedSchedule","id","newScheduleBlock","startTurnaroundTime","endTurnaroundTime","turnaroundObj","origin","newScheduledTime","currentPercentage","newUsageList","newRotation","onRotationClick","aircraftFlightIndex","findIndex","el","newAircraftFlights","splice","scheduledTimeIndex","filterFlights","curRot","length","canBeScheduled","flight","lastIndex","filter","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport AircraftsList from './AircraftsList';\nimport FlightsList from './FlightsList';\nimport RotationColumn from './RotationColumn';\nimport Calendar from './Calendar';\nimport {\n  typeFlight,\n  typeTurnaround,\n  turnaroundTime,\n  totalDayTime,\n  timeSort,\n  flightsSort,\n  calcPercentage,\n  turnaroundPercentage,\n  usagePercentage,\n  todaysDate,\n} from './utils';\n\n// Since I decided not to use redux, all the state is included in App\n// Using hooks to have a cleaner code\nconst App = () => {\n  // State\n  const [aircrafts, setAircrafts] = useState([]);\n  const [flights, setFlights] = useState([]);\n  const [flightsLoading, setFlightsLoading] = useState(false);\n  const [rotations, setRotations] = useState({});\n  const [selectedAircraft, setSelectedAircraft] = useState('');\n  const [usageList, setUsageList] = useState({});\n\n  const fetchData = async (value, callback, sorter) => {\n    const res = await fetch(value);\n    const body = await res.json();\n    const { data } = body;\n    const response = data || body;\n    if (sorter) {\n      response.sort(sorter);\n    }\n    callback(response);\n  };\n\n  useEffect(() => {\n    fetchData(\n      'https://infinite-dawn-93085.herokuapp.com/aircrafts',\n      setAircrafts,\n    );\n  }, []);\n\n  // Initialize the rotation object ()\n  const makeNewRotation = aircraft => {\n    const newRotations = {\n      ...rotations,\n      [aircraft]: {\n        flights: [],\n        freeTime: [\n          {\n            start: 0,\n            end: 86400,\n            percentage: 100,\n            type: 'Free',\n          },\n        ],\n        scheduledTime: [],\n      },\n    };\n    setRotations(newRotations);\n  };\n\n  // Calculates the \"free time\" an aircraft has\n  const makeFreeTime = scheduledTime => {\n    const freeTimeObj = scheduledTime.reduce(\n      (acc, val) => {\n        if (val.start - acc.lastTime <= 0) {\n          return acc;\n        }\n        if (val.type === typeFlight) {\n          const obj = {\n            start: acc.lastTime,\n            end: val.start,\n            type: 'Free',\n          };\n          obj.percentage = calcPercentage(obj.end - obj.start, totalDayTime);\n          acc.freeTime.push(obj);\n        } else if (val.type === typeTurnaround) {\n          acc.lastTime = val.end;\n        }\n        return acc;\n      },\n      {\n        lastTime: 0,\n        freeTime: [],\n      },\n    );\n    const { lastTime, freeTime } = freeTimeObj;\n    if (lastTime <= totalDayTime) {\n      freeTime.push({\n        start: lastTime,\n        end: totalDayTime,\n        percentage: calcPercentage(totalDayTime - lastTime, totalDayTime),\n        type: 'Free',\n      });\n    }\n    return freeTime;\n  };\n\n  const makeAirCraftRotation = aircraftRotation => {\n    const { scheduledTime } = aircraftRotation;\n    const freeTime = makeFreeTime(scheduledTime);\n    const newAircraftRotation = {\n      ...aircraftRotation,\n      freeTime,\n    };\n    return {\n      ...rotations,\n      [selectedAircraft]: newAircraftRotation,\n    };\n  };\n\n  const onAircraftClick = async aircraft => {\n    // In a real case scenario this would accept a value to fetch data based on the aircraft\n    setFlightsLoading(true);\n    await fetchData(\n      'https://infinite-dawn-93085.herokuapp.com/flights',\n      setFlights,\n      flightsSort,\n    );\n    setSelectedAircraft(aircraft);\n    if (!rotations[aircraft]) {\n      makeNewRotation(aircraft);\n    }\n    setFlightsLoading(false);\n  };\n\n  const onFlightClick = target => {\n    const {\n      flights: aircraftFlights,\n      scheduledTime: aircraftScheduledTime,\n    } = rotations[selectedAircraft];\n    const newRotationFlights = aircraftFlights\n      ? [...aircraftFlights, target].sort(flightsSort)\n      : [target];\n    const { ident, departuretime, arrivaltime, destination } = target;\n    const formattedSchedule = {\n      id: ident,\n      type: typeFlight,\n      start: departuretime,\n      end: arrivaltime,\n      percentage: calcPercentage(arrivaltime - departuretime, totalDayTime),\n    };\n    const newScheduleBlock = [formattedSchedule];\n    const startTurnaroundTime = formattedSchedule.end;\n    const endTurnaroundTime = formattedSchedule.end + turnaroundTime;\n    if (endTurnaroundTime - startTurnaroundTime) {\n      const turnaroundObj = {\n        id: ident,\n        type: typeTurnaround,\n        start:\n          startTurnaroundTime <= totalDayTime\n            ? startTurnaroundTime\n            : totalDayTime,\n        end:\n          endTurnaroundTime <= totalDayTime ? endTurnaroundTime : totalDayTime,\n        origin: destination,\n        percentage: turnaroundPercentage,\n      };\n      newScheduleBlock.push(turnaroundObj);\n    }\n    const newScheduledTime = [\n      ...aircraftScheduledTime,\n      ...newScheduleBlock,\n    ].sort(timeSort);\n    const currentPercentage = usagePercentage(newScheduledTime);\n    const newUsageList = {\n      ...usageList,\n      [selectedAircraft]: currentPercentage,\n    };\n    setUsageList(newUsageList);\n    const newAircraftRotation = {\n      ...rotations[selectedAircraft],\n      flights: newRotationFlights,\n      scheduledTime: newScheduledTime,\n    };\n    const newRotation = makeAirCraftRotation(newAircraftRotation);\n    setRotations(newRotation);\n  };\n\n  const onRotationClick = target => {\n    const {\n      flights: aircraftFlights,\n      scheduledTime: aircraftScheduledTime,\n    } = rotations[selectedAircraft];\n    const aircraftFlightIndex = aircraftFlights.findIndex(el => el === target);\n    const newAircraftFlights = aircraftFlights.splice(0, aircraftFlightIndex);\n    const scheduledTimeIndex = aircraftScheduledTime.findIndex(\n      el => el.id === target.ident,\n    );\n    const newScheduledTime = aircraftScheduledTime.splice(\n      0,\n      scheduledTimeIndex,\n    );\n    const currentPercentage = usagePercentage(newScheduledTime);\n    const newUsageList = {\n      ...usageList,\n      [selectedAircraft]: currentPercentage,\n    };\n    setUsageList(newUsageList);\n    const newAircraftRotation = {\n      ...rotations[selectedAircraft],\n      flights: newAircraftFlights,\n      scheduledTime: newScheduledTime,\n    };\n    const newRotation = makeAirCraftRotation(newAircraftRotation);\n    setRotations(newRotation);\n  };\n\n  const filterFlights = () => {\n    const curRot = rotations[selectedAircraft];\n    if (!curRot || !curRot.flights.length) {\n      return flights;\n    }\n    const canBeScheduled = flight => {\n      const lastIndex = curRot.scheduledTime.length - 1;\n      const { origin, end } = curRot.scheduledTime[lastIndex];\n      return (\n        (!origin || origin === flight.origin) && flight.departuretime >= end\n      );\n    };\n    return flights.filter(flight => {\n      return !curRot.flights.includes(flight) && canBeScheduled(flight);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Calendar date={todaysDate} />\n      <AircraftsList\n        aircraftList={aircrafts}\n        onElementClick={onAircraftClick}\n        usageList={usageList}\n      />\n      <RotationColumn\n        rotation={rotations[selectedAircraft] || []}\n        onElementClick={onRotationClick}\n        selectedAircraft={selectedAircraft}\n      />\n      <FlightsList\n        flightsLoading={flightsLoading}\n        flightList={filterFlights()}\n        onElementClick={onFlightClick}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}