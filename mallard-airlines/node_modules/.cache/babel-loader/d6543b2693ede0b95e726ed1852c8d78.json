{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Duckie\\\\Documents\\\\AlphaSights Project\\\\flights\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // import '@atlaskit/css-reset';\n\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n`;\n_c = Container;\n\nclass InnerList extends React.PureComponent {\n  render() {\n    const {\n      column,\n      taskMap,\n      index\n    } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    return /*#__PURE__*/_jsxDEV(Column, {\n      column: column,\n      tasks: tasks,\n      index: index\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId,\n        type\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      if (type === 'column') {\n        const newColumnOrder = Array.from(this.state.columnOrder);\n        newColumnOrder.splice(source.index, 1);\n        newColumnOrder.splice(destination.index, 0, draggableId);\n        const newState = { ...this.state,\n          columnOrder: newColumnOrder\n        };\n        this.setState(newState);\n        return;\n      }\n\n      const home = this.state.columns[source.droppableId];\n      const foreign = this.state.columns[destination.droppableId];\n\n      if (home === foreign) {\n        const newTaskIds = Array.from(home.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newHome = { ...home,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newHome.id]: newHome\n          }\n        };\n        this.setState(newState);\n        return;\n      } // moving from one list to another\n\n\n      const homeTaskIds = Array.from(home.taskIds);\n      homeTaskIds.splice(source.index, 1);\n      const newHome = { ...home,\n        taskIds: homeTaskIds\n      };\n      const foreignTaskIds = Array.from(foreign.taskIds);\n      foreignTaskIds.splice(destination.index, 0, draggableId);\n      const newForeign = { ...foreign,\n        taskIds: foreignTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newHome.id]: newHome,\n          [newForeign.id]: newForeign\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        children: provided => /*#__PURE__*/_jsxDEV(Container, { ...provided.droppableProps,\n          innerRef: provided.innerRef,\n          children: [this.state.columnOrder.map((columnId, index) => {\n            const column = this.state.columns[columnId];\n            return /*#__PURE__*/_jsxDEV(InnerList, {\n              column: column,\n              taskMap: this.state.tasks,\n              index: index\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this);\n          }), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 135,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Duckie/Documents/AlphaSights Project/flights/src/index.js"],"names":["React","ReactDOM","styled","DragDropContext","Droppable","initialData","Column","Container","div","InnerList","PureComponent","render","column","taskMap","index","props","tasks","taskIds","map","taskId","App","Component","state","onDragEnd","result","destination","source","draggableId","type","droppableId","newColumnOrder","Array","from","columnOrder","splice","newState","setState","home","columns","foreign","newTaskIds","newHome","id","homeTaskIds","foreignTaskIds","newForeign","provided","droppableProps","innerRef","columnId","placeholder","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass InnerList extends React.PureComponent {\n  render() {\n    const { column, taskMap, index } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    return <Column column={column} tasks={tasks} index={index} />;\n  }\n}\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder,\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const home = this.state.columns[source.droppableId];\n    const foreign = this.state.columns[destination.droppableId];\n\n    if (home === foreign) {\n      const newTaskIds = Array.from(home.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newHome = {\n        ...home,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newHome.id]: newHome,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // moving from one list to another\n    const homeTaskIds = Array.from(home.taskIds);\n    homeTaskIds.splice(source.index, 1);\n    const newHome = {\n      ...home,\n      taskIds: homeTaskIds,\n    };\n\n    const foreignTaskIds = Array.from(foreign.taskIds);\n    foreignTaskIds.splice(destination.index, 0, draggableId);\n    const newForeign = {\n      ...foreign,\n      taskIds: foreignTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newHome.id]: newHome,\n        [newForeign.id]: newForeign,\n      },\n    };\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container\n              {...provided.droppableProps}\n              innerRef={provided.innerRef}\n            >\n              {this.state.columnOrder.map((columnId, index) => {\n                const column = this.state.columns[columnId];\n                return (\n                  <InnerList\n                    key={column.id}\n                    column={column}\n                    taskMap={this.state.tasks}\n                    index={index}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}